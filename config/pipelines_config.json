{
  "version": "1.0.0",
  "description": "MindNext Hooks Action Pipelines Configuration",
  
  "pipelines": [
    {
      "pipeline_id": "code_quality_full_check",
      "name": "Complete Code Quality Check Pipeline",
      "parallel_execution": false,
      "stop_on_error": false,
      "steps": [
        {
          "action_id": "quality_check",
          "action_type": "action.quality",
          "parameters": {
            "operation": "check"
          },
          "required": true,
          "output_to": "quality_results"
        },
        {
          "action_id": "security_scan",
          "action_type": "action.quality",
          "parameters": {
            "operation": "security_scan"
          },
          "required": false,
          "condition": "quality_results.get('summary', {}).get('total_errors', 0) == 0"
        },
        {
          "action_id": "similarity_check",
          "action_type": "action.quality",
          "parameters": {
            "operation": "similarity_check",
            "threshold": 0.8
          },
          "required": false
        },
        {
          "action_id": "notification",
          "action_type": "action.notification",
          "parameters": {
            "type": "toast",
            "severity": "success",
            "message": "Code quality check pipeline completed",
            "duration": 5000
          },
          "required": true
        }
      ],
      "metadata": {
        "category": "quality_assurance",
        "estimated_duration": "10-30 seconds"
      }
    },
    
    {
      "pipeline_id": "ai_enhanced_analysis",
      "name": "AI-Enhanced Code Analysis Pipeline",
      "parallel_execution": true,
      "stop_on_error": false,
      "steps": [
        {
          "action_id": "code_analysis",
          "action_type": "action.ai",
          "parameters": {
            "operation": "analyze_code"
          },
          "required": true,
          "output_to": "ai_analysis"
        },
        {
          "action_id": "extract_keywords",
          "action_type": "action.utility",
          "parameters": {
            "operation": "aisdk.extract_keywords",
            "text": "{event.content}",
            "max_keywords": 8
          },
          "required": false,
          "output_to": "keywords"
        },
        {
          "action_id": "generate_suggestions",
          "action_type": "action.ai",
          "parameters": {
            "operation": "generate_suggestions",
            "type": "maintainability"
          },
          "required": false,
          "input_from": "ai_analysis"
        },
        {
          "action_id": "cache_results",
          "action_type": "action.utility",
          "parameters": {
            "operation": "cache.set",
            "key": "last_ai_analysis",
            "value": "{ai_analysis}",
            "ttl": 1800
          },
          "required": false
        }
      ],
      "metadata": {
        "category": "ai_enhancement",
        "estimated_duration": "5-15 seconds"
      }
    },
    
    {
      "pipeline_id": "memory_recording_pipeline",
      "name": "Knowledge Recording and Integration Pipeline",
      "parallel_execution": false,
      "stop_on_error": true,
      "steps": [
        {
          "action_id": "analyze_event",
          "action_type": "action.analysis",
          "parameters": {
            "type": "basic"
          },
          "required": true,
          "output_to": "event_analysis"
        },
        {
          "action_id": "buffer_event",
          "action_type": "action.utility",
          "parameters": {
            "operation": "buffer.push",
            "buffer_id": "memory_queue",
            "data": "{event_analysis}"
          },
          "required": false
        },
        {
          "action_id": "record_to_memory",
          "action_type": "action.memory",
          "parameters": {
            "operation": "record",
            "use_mindnext": true,
            "summary": "Auto-generated from hooks system"
          },
          "required": true,
          "input_from": "event_analysis"
        },
        {
          "action_id": "notify_completion",
          "action_type": "action.notification",
          "parameters": {
            "type": "console",
            "severity": "info",
            "message": "Event recorded to knowledge graph"
          },
          "required": false
        }
      ],
      "metadata": {
        "category": "memory_management",
        "estimated_duration": "2-8 seconds"
      }
    },
    
    {
      "pipeline_id": "error_handling_pipeline",
      "name": "Error Detection and Recovery Pipeline",
      "parallel_execution": false,
      "stop_on_error": false,
      "steps": [
        {
          "action_id": "circuit_breaker_check",
          "action_type": "action.conditional",
          "parameters": {
            "operation": "circuit_breaker",
            "failure_threshold": 5,
            "recovery_timeout": 300,
            "key": "error_detection"
          },
          "required": true,
          "output_to": "circuit_status"
        },
        {
          "action_id": "error_notification",
          "action_type": "action.notification",
          "parameters": {
            "type": "system",
            "title": "Error Detected",
            "message": "Hooks system detected an error condition"
          },
          "required": false,
          "condition": "not circuit_status.get('allowed', True)"
        },
        {
          "action_id": "backup_state",
          "action_type": "action.utility",
          "parameters": {
            "operation": "buffer.flush",
            "buffer_id": "error_backup",
            "target": "/root/Dev/mindnext/logs/error_backup.json"
          },
          "required": false
        }
      ],
      "metadata": {
        "category": "error_handling",
        "estimated_duration": "1-3 seconds"
      }
    },
    
    {
      "pipeline_id": "performance_monitoring_pipeline",
      "name": "Performance Monitoring and Optimization Pipeline",
      "parallel_execution": true,
      "stop_on_error": false,
      "steps": [
        {
          "action_id": "performance_analysis",
          "action_type": "action.analysis",
          "parameters": {
            "type": "performance"
          },
          "required": true,
          "output_to": "perf_data"
        },
        {
          "action_id": "cache_cleanup",
          "action_type": "action.utility",
          "parameters": {
            "operation": "cache.cleanup"
          },
          "required": false
        },
        {
          "action_id": "buffer_status",
          "action_type": "action.utility",
          "parameters": {
            "operation": "buffer.list"
          },
          "required": false,
          "output_to": "buffer_info"
        },
        {
          "action_id": "health_check",
          "action_type": "action.utility",
          "parameters": {
            "operation": "health_check"
          },
          "required": true,
          "output_to": "health_status"
        },
        {
          "action_id": "performance_log",
          "action_type": "action.utility",
          "parameters": {
            "operation": "log",
            "message": "Performance check completed: {health_status}",
            "level": "info",
            "write_file": true,
            "log_file": "/root/Dev/mindnext/logs/performance.log"
          },
          "required": false
        }
      ],
      "metadata": {
        "category": "performance",
        "estimated_duration": "3-10 seconds"
      }
    },
    
    {
      "pipeline_id": "user_prompt_enhancement_pipeline",
      "name": "User Prompt Analysis and Enhancement Pipeline",
      "parallel_execution": false,
      "stop_on_error": false,
      "steps": [
        {
          "action_id": "prompt_analysis",
          "action_type": "action.prompt",
          "parameters": {
            "operation": "analyze"
          },
          "required": true,
          "output_to": "prompt_data"
        },
        {
          "action_id": "prompt_validation",
          "action_type": "action.prompt",
          "parameters": {
            "operation": "validate"
          },
          "required": true,
          "input_from": "prompt_data"
        },
        {
          "action_id": "enhancement_check",
          "action_type": "action.conditional",
          "parameters": {
            "operation": "if_then",
            "conditions": [
              {
                "expression": "prompt_data.get('score', 100) < 70",
                "then_action": "prompt_enhance",
                "action_params": {
                  "action_type": "action.prompt",
                  "parameters": {
                    "operation": "enhance",
                    "type": "clarity"
                  }
                }
              }
            ]
          },
          "required": false
        },
        {
          "action_id": "ai_keyword_extraction",
          "action_type": "action.utility",
          "parameters": {
            "operation": "aisdk.extract_keywords",
            "text": "{event.user_prompt}",
            "max_keywords": 5
          },
          "required": false
        }
      ],
      "metadata": {
        "category": "prompt_enhancement",
        "estimated_duration": "2-5 seconds"
      }
    },
    
    {
      "pipeline_id": "cleanup_and_maintenance_pipeline",
      "name": "System Cleanup and Maintenance Pipeline",
      "parallel_execution": false,
      "stop_on_error": false,
      "steps": [
        {
          "action_id": "cache_cleanup",
          "action_type": "action.utility",
          "parameters": {
            "operation": "cache.cleanup"
          },
          "required": true,
          "output_to": "cache_cleanup_result"
        },
        {
          "action_id": "buffer_cleanup",
          "action_type": "action.utility",
          "parameters": {
            "operation": "buffer.cleanup_empty"
          },
          "required": true,
          "output_to": "buffer_cleanup_result"
        },
        {
          "action_id": "ai_cleanup",
          "action_type": "action.utility",
          "parameters": {
            "operation": "aisdk.cleanup"
          },
          "required": false
        },
        {
          "action_id": "generate_cleanup_report",
          "action_type": "action.memory",
          "parameters": {
            "operation": "export",
            "format": "json",
            "date_range": "today"
          },
          "required": false
        },
        {
          "action_id": "cleanup_notification",
          "action_type": "action.notification",
          "parameters": {
            "type": "console",
            "severity": "success",
            "message": "System cleanup completed successfully"
          },
          "required": false
        }
      ],
      "metadata": {
        "category": "maintenance",
        "estimated_duration": "5-15 seconds"
      }
    }
  ],
  
  "pipeline_groups": {
    "quality_assurance": ["code_quality_full_check"],
    "ai_enhancement": ["ai_enhanced_analysis", "user_prompt_enhancement_pipeline"],
    "memory_management": ["memory_recording_pipeline"],
    "system_health": ["error_handling_pipeline", "performance_monitoring_pipeline", "cleanup_and_maintenance_pipeline"]
  },
  
  "global_pipeline_settings": {
    "max_concurrent_pipelines": 3,
    "default_timeout": 30,
    "enable_pipeline_caching": true,
    "log_pipeline_execution": true,
    "pipeline_retry_count": 1
  }
}